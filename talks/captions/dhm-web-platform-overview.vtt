WEBVTT

slide-1
00:08.160 --> 00:09.440
Hello,

2
00:09.440 --> 00:14.680
Warm welcome to the W3C Web &amp; Machine Learning workshop.

3
00:14.680 --> 00:16.520
I am Dominique Hazael-Massieux,

4
00:16.520 --> 00:19.840
I am part of the W3C technical staff

5
00:19.840 --> 00:23.280
and have been working with the Workshop Program Committee

6
00:23.280 --> 00:26.400
in organizing this virtual event.

7
00:26.400 --> 00:28.920
You can find me on twitter and github

8
00:28.920 --> 00:30.560
as @dontcallmeDOM

9
00:30.560 --> 00:33.800
(but do call me Dom).

slide-2
00:33.800 --> 00:37.400
This talk aims to give a very high-level overview

12
00:37.400 --> 00:39.400
of the specificities of

13
00:39.400 --> 00:41.600
what we call the Web platform

14
00:41.600 --> 00:44.280
for those of you who may not be as familiar

15
00:44.280 --> 00:46.800
with how browsers work.

16
00:46.800 --> 00:49.960
Since a lot of the existing Machine Learning development

17
00:49.960 --> 00:52.680
happens in non-Web environments,

18
00:52.680 --> 00:53.800
the Program Committee thought

19
00:53.800 --> 00:58.400
it would be useful that we build a shared understanding

20
00:58.400 --> 01:00.880
of these specificities and how it impacts

21
01:00.880 --> 01:05.880
the deployment of new technologies in Web browsers.

slide-3
01:05.880 --> 01:10.800
So what is it that we call the Web platform?

25
01:10.800 --> 01:13.480
The simplest way to approach that question

26
01:13.480 --> 01:16.640
is through a technology stack lens:

27
01:16.640 --> 01:21.800
most devices with an internet connection provide their users

28
01:21.800 --> 01:22.920
with at least one browser

29
01:22.920 --> 01:27.760
that can fetch content over HTTP (and a few other network protocols)

30
01:27.760 --> 01:33.000
, render HTML content styled with Cascading Style Sheets (CSS)

31
01:33.000 --> 01:37.000
and interpret JavaScript code that can interact with that content

32
01:37.000 --> 01:42.400
through a set of APIs called the Document Object Model (DOM).

33
01:42.400 --> 01:46.560
Browsers also provide a large and growing number of JavaScript APIs

34
01:46.560 --> 01:52.400
that enable interacting with various hardware and OS capabilities.

35
01:52.400 --> 01:53.720
For the past couple of years,

36
01:53.720 --> 01:57.800
browsers have also provided a native-performance bytecode

37
01:57.800 --> 02:00.800
called WebAssembly that among other things

38
02:00.800 --> 02:04.440
let compile existing non-JavaScript codebase

39
02:04.440 --> 02:08.360
into browser-runnable applications.

41
02:08.360 --> 02:10.480
So that's for the technology stack

42
02:10.480 --> 02:14.800
that constitutes the Web platform.

slide-4
02:14.800 --> 02:17.960
But there are four key aspects I want to highlight today

45
02:17.960 --> 02:22.320
that make browsers a unique execution environment.

slide-5
02:25.200 --> 02:28.440
A first aspect is that browsers are built

48
02:28.440 --> 02:30.880
with networking as a core design point

49
02:30.880 --> 02:32.800
this means that it is relatively easy

50
02:32.800 --> 02:36.520
to bring in resources from different network sources,

51
02:36.520 --> 02:39.120
but it also comes with constraints in that usage:

52
02:39.120 --> 02:42.440
in particular, a lot of the trust and security boundaries

53
02:42.440 --> 02:44.960
are anchored in network identifers,

54
02:44.960 --> 02:49.120
mostly via DNS and certificates.

slide-6
02:49.120 --> 02:52.960
A second aspect is that browsers are designed as user agents

58
02:52.960 --> 02:57.320
they are positioned to be the agent of end users.

59
02:57.320 --> 03:00.000
They are expected to keep the user in control

60
03:00.000 --> 03:02.720
and help ensure their needs are fulfilled

61
03:02.720 --> 03:06.800
W3C pays particular attention to considerations of

62
03:06.800 --> 03:09.960
security, privacy, accessibility and internationalization

63
03:09.960 --> 03:11.440
when it comes to user needs.

64
03:11.440 --> 03:17.280
To respect that position agent of the user,

65
03:17.280 --> 03:19.880
it is often necessary to impose limits

66
03:19.880 --> 03:22.400
to what developers can do in the code

67
03:22.400 --> 03:23.840
that browsers will run for them.

slide-7
03:23.840 --> 03:28.480
A third important aspect is that

71
03:28.480 --> 03:31.520
all the technologies that constitute the platform

72
03:31.520 --> 03:35.160
are defined through open standardization processes,

73
03:35.160 --> 03:37.560
including naturally in W3C,

74
03:37.560 --> 03:39.920
and these standards are implemented

75
03:39.920 --> 03:42.800
in multiple competing products

76
03:42.800 --> 03:44.680
and are made available freely to developers

77
03:44.680 --> 03:46.000
and end-users alike.

slide-8
03:46.000 --> 03:52.000
Finally, browsers are available on most end-user devices,

81
03:52.000 --> 03:55.560
no matter their operating system and their hardware,

82
03:55.560 --> 04:00.440
including computing architectures and capabilities.

83
04:00.440 --> 04:04.360
In particular, technologies made available through browsers

84
04:04.360 --> 04:09.000
need to be as device- and platform-independent as possible,

85
04:09.000 --> 04:16.480
and provide accommodations for situations where they cannot be.

slide-9
04:16.480 --> 04:19.480
With that characterization in mind,

89
04:19.480 --> 04:22.400
what does it imply when it comes to bringing

90
04:22.400 --> 04:24.800
a new technology such as machine learning

91
04:24.800 --> 04:26.240
to the Web platform ?

slide-10
04:26.240 --> 04:31.560
A first characteristic is that in most cases,

94
04:31.560 --> 04:34.880
any technology that requires imperative programming

95
04:34.880 --> 04:37.480
will need to be exposed via JavaScript,

96
04:37.480 --> 04:41.120
and thus inherits the specificities of the JavaScript language:

97
04:41.120 --> 04:46.520
JavaScript operates under a single-threaded event loop.

98
04:46.520 --> 04:50.840
This means developers mostly aren't exposed to concurreny issues,

99
04:50.840 --> 04:51.680
which is a good thing,

100
04:51.680 --> 04:54.400
but it also creates constraints

101
04:54.400 --> 04:56.160
in how programs can be architected.

102
04:56.160 --> 05:00.240
In particular, in browsers, the main JavaScript event loop

103
05:00.240 --> 05:04.840
can block the rendering or interactivity of the page that loaded it

104
05:04.840 --> 05:08.760
so running blocking synchronous operations

105
05:08.760 --> 05:11.480
or other heavy processing in that context

106
05:11.480 --> 05:15.480
can very rapidly deteriorate the user experience.

107
05:15.480 --> 05:19.320
Various mechanisms are available to enable developers

108
05:19.320 --> 05:22.640
to run different pieces of their code concurrently,

109
05:22.640 --> 05:27.400
most notably asynchonous APIs, workers and worklets,

110
05:27.400 --> 05:31.760
but they come with their own set of execution constraints.

111
05:31.760 --> 05:34.680
The high level consideration to keep in mind is

112
05:34.680 --> 05:38.480
that technologies that require heavy CPU operations

113
05:38.480 --> 05:43.960
need to carefully integrate with these architectural constraints.

slide-11
05:43.960 --> 05:46.800
A second characteristic is that

116
05:46.800 --> 05:48.960
from within a Web application,

117
05:48.960 --> 05:52.960
most interactions with the network will by default

118
05:52.960 --> 05:56.600
be limited to the domain of where the application is hosted

119
05:56.600 --> 05:59.200
(more specifically, its origin),

120
05:59.200 --> 06:03.640
and access to other network destinations will only be granted

121
06:03.640 --> 06:06.560
if that other destination opts-in to it.

122
06:06.560 --> 06:11.200
This helps limit exposures to private resources in local networks

123
06:11.200 --> 06:14.960
(for instance a home network or an enterprise network).

124
06:14.960 --> 06:19.720
In the context of machine learning, this means that

125
06:19.720 --> 06:24.120
for instance, loading a trained model from a third party service

126
06:24.120 --> 06:26.560
would need to conform to this constraint

127
06:26.560 --> 06:30.480
and may also need additional sandboxing to respect

128
06:30.480 --> 06:32.360
the end user security and privacy.

slide-12
06:32.360 --> 06:36.840
A third similar characteristic,

131
06:36.840 --> 06:39.400
and one of rapidly growing importance,

132
06:39.400 --> 06:43.160
is that browsers limit what identifiable information

133
06:43.160 --> 06:45.280
can be tracked across Web sites:

134
06:45.280 --> 06:48.960
while a lot of parties attempt to identify users

135
06:48.960 --> 06:51.400
as they browse through different Web sites,

136
06:51.400 --> 06:55.240
browsers attempt to give users control on what gets shared

137
06:55.240 --> 06:59.680
and when and how to limit what gets shared without user awareness.

138
06:59.680 --> 07:02.920
In particular, a lot of the recent evolutions in

139
07:02.920 --> 07:04.720
how “cookies” are managed,

140
07:04.720 --> 07:06.680
how data gets stored and

141
07:06.680 --> 07:11.800
how much uniquely-identifiable data is exposed in APIs

142
07:11.800 --> 07:14.440
(that data can be used to “fingerprint”

143
07:14.440 --> 07:16.520
a particular user or a particular device),

144
07:16.520 --> 07:19.920
a lot of these evolutions can have deep impact

145
07:19.920 --> 07:22.400
in how new Web technologies get designed.

slide-13
07:22.400 --> 07:28.200
As a final characteristic to call attention to

148
07:28.200 --> 07:31.320
in the context of bringing Machine Learning to the Web,

149
07:31.320 --> 07:34.240
Web technologies need to be designed

150
07:34.240 --> 07:38.280
to run across many different platform and architectures.

151
07:38.280 --> 07:42.640
Machine learning tends to be very compute-intensive

152
07:42.640 --> 07:46.800
and thus would generally need a lot of optimization

153
07:46.800 --> 07:47.880
to run as efficiently as possible;

154
07:47.880 --> 07:51.320
while these optimizations are definitely relevant

155
07:51.320 --> 07:52.960
in the context of the Web platform,

156
07:52.960 --> 07:56.360
they need to be exposed to developers in a way

157
07:56.360 --> 07:59.520
that let browsers run these optimizations

158
07:59.520 --> 08:01.560
on all the devices they operate on.

159
08:01.560 --> 08:05.640
In some cases, the lack of specific hardware

160
08:05.640 --> 08:09.360
makes running a given application likely not worth it

161
08:09.360 --> 08:14.680
various mechanisms of feature detection and context establishment

162
08:14.680 --> 08:17.400
have been deployed in other technologies

163
08:17.400 --> 08:20.520
(for instance, detecting the availability of

164
08:20.520 --> 08:23.400
virtual reality gear in WebXR)

165
08:23.400 --> 08:26.760
and they let developers determine if and how

166
08:26.760 --> 08:30.640
to adapt their application to the specific end user context,

167
08:30.640 --> 08:34.520
while preserving as much as possible the user privacy.

slide-14
08:34.520 --> 08:40.720
For people coming from other execution environments,

170
08:40.720 --> 08:44.240
these constraints can sometimes appear overwhelming,

171
08:44.240 --> 08:47.320
and in truth, they can in fact be pretty challenging

172
08:47.320 --> 08:49.960
to address in a number of cases

173
08:49.960 --> 08:53.200
a good chunk of the open standardization process

174
08:53.200 --> 08:57.560
that W3C hosts revolve around finding the right trade-offs

175
08:57.560 --> 09:00.160
among the competing needs they represent.

176
09:00.160 --> 09:04.880
Naturally, these constraints don't exist in a vacuum

178
09:04.880 --> 09:08.600
they are the pilars that have enabled the Web platform

179
09:08.600 --> 09:11.760
to grow to be the most deployed software platform,

180
09:11.760 --> 09:15.520
available to more than 4 billion people around the globe,

181
09:15.520 --> 09:18.840
and with the largest community of developers available.

182
09:18.840 --> 09:24.760
W3C has built processes, culture and institutional knowledge

183
09:24.760 --> 09:27.480
to ensure that the Web platform keeps pace

184
09:27.480 --> 09:31.400
with the evolving capabilities of computing devices

185
09:31.400 --> 09:33.720
while preserving the characteristics

186
09:33.720 --> 09:37.600
that make the Web the most universal platform available.

slide-15
09:37.600 --> 09:42.840
I hope the presentations and discussions at the workshop

188
09:42.840 --> 09:46.240
will pave the way for Machine Learning to bring

189
09:46.240 --> 09:50.480
its capabilities to the service of the many billions of users

190
09:50.480 --> 09:53.800
that rely on Web browsers in their daily life,

191
09:53.800 --> 09:56.840
and I hope this presentation helped better understand

192
09:56.840 --> 10:01.800
what it means to bring Machine Learning capabilities

193
10:01.800 --> 10:02.400
to the Web platform.

195
10:02.400 --> 10:04.240
Thank you for your time.


